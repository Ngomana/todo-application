{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/app/_components/post.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LatestPost = registerClientReference(\n    function() { throw new Error(\"Attempted to call LatestPost() from the server but LatestPost is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/_components/post.tsx <module evaluation>\",\n    \"LatestPost\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,8DACA"}},
    {"offset": {"line": 15, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 21, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/app/_components/post.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport const LatestPost = registerClientReference(\n    function() { throw new Error(\"Attempted to call LatestPost() from the server but LatestPost is on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/_components/post.tsx\",\n    \"LatestPost\",\n);\n"],"names":[],"mappings":";;;AAAA;;AACO,MAAM,aAAa,CAAA,GAAA,oXAAA,CAAA,0BAAuB,AAAD,EAC5C;IAAa,MAAM,IAAI,MAAM;AAAoO,GACjQ,0CACA"}},
    {"offset": {"line": 29, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 35, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 39, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 45, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/server/api/trpc.ts"],"sourcesContent":["/**\r\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\r\n * 1. You want to modify request context (see Part 1).\r\n * 2. You want to create a new middleware or type of procedure (see Part 3).\r\n *\r\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\r\n * need to use are documented accordingly near the end.\r\n */\r\nimport { initTRPC } from \"@trpc/server\";\r\nimport superjson from \"superjson\";\r\nimport { ZodError } from \"zod\";\r\n\r\n/**\r\n * 1. CONTEXT\r\n *\r\n * This section defines the \"contexts\" that are available in the backend API.\r\n *\r\n * These allow you to access things when processing a request, like the database, the session, etc.\r\n *\r\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\r\n * wrap this and provides the required context.\r\n *\r\n * @see https://trpc.io/docs/server/context\r\n */\r\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\r\n  return {\r\n    ...opts,\r\n  };\r\n};\r\n\r\n/**\r\n * 2. INITIALIZATION\r\n *\r\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\r\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\r\n * errors on the backend.\r\n */\r\nconst t = initTRPC.context<typeof createTRPCContext>().create({\r\n  transformer: superjson,\r\n  errorFormatter({ shape, error }) {\r\n    return {\r\n      ...shape,\r\n      data: {\r\n        ...shape.data,\r\n        zodError:\r\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\r\n      },\r\n    };\r\n  },\r\n});\r\n\r\n/**\r\n * Create a server-side caller.\r\n *\r\n * @see https://trpc.io/docs/server/server-side-calls\r\n */\r\nexport const createCallerFactory = t.createCallerFactory;\r\n\r\n/**\r\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\r\n *\r\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\r\n * \"/src/server/api/routers\" directory.\r\n */\r\n\r\n/**\r\n * This is how you create new routers and sub-routers in your tRPC API.\r\n *\r\n * @see https://trpc.io/docs/router\r\n */\r\nexport const createTRPCRouter = t.router;\r\n\r\n/**\r\n * Middleware for timing procedure execution and adding an artificial delay in development.\r\n *\r\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\r\n * network latency that would occur in production but not in local development.\r\n */\r\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\r\n  const start = Date.now();\r\n\r\n  if (t._config.isDev) {\r\n    // artificial delay in dev\r\n    const waitMs = Math.floor(Math.random() * 400) + 100;\r\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\r\n  }\r\n\r\n  const result = await next();\r\n\r\n  const end = Date.now();\r\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\r\n\r\n  return result;\r\n});\r\n\r\n/**\r\n * Public (unauthenticated) procedure\r\n *\r\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\r\n * guarantee that a user querying is authorized, but you can still access user session data if they\r\n * are logged in.\r\n */\r\nexport const publicProcedure = t.procedure.use(timingMiddleware);\r\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;AACD;AACA;AADA;AAEA;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,qSAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,gMAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,qLAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC"}},
    {"offset": {"line": 108, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 114, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/server/api/root.ts"],"sourcesContent":["import { todoRouter } from \"~/server/api/routers/post\";\r\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\r\n\r\n/**\r\n * This is the primary router for your server.\r\n *\r\n * All routers added in /api/routers should be manually added here.\r\n */\r\nexport const appRouter = createTRPCRouter({\r\n  post: postRouter,\r\n});\r\n\r\n// export type definition of API\r\nexport type AppRouter = typeof appRouter;\r\n\r\n/**\r\n * Create a server-side caller for the tRPC API.\r\n * @example\r\n * const trpc = createCaller(createContext);\r\n * const res = await trpc.post.all();\r\n *       ^? Post[]\r\n */\r\nexport const createCaller = createCallerFactory(appRouter);\r\n"],"names":[],"mappings":";;;;AACA;;AAOO,MAAM,YAAY,CAAA,GAAA,4HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM;AACR;AAYO,MAAM,eAAe,CAAA,GAAA,4HAAA,CAAA,sBAAmB,AAAD,EAAE"}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 130, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/trpc/query-client.ts"],"sourcesContent":["import {\r\n  defaultShouldDehydrateQuery,\r\n  QueryClient,\r\n} from \"@tanstack/react-query\";\r\nimport SuperJSON from \"superjson\";\r\n\r\nexport const createQueryClient = () =>\r\n  new QueryClient({\r\n    defaultOptions: {\r\n      queries: {\r\n        // With SSR, we usually want to set some default staleTime\r\n        // above 0 to avoid refetching immediately on the client\r\n        staleTime: 30 * 1000,\r\n      },\r\n      dehydrate: {\r\n        serializeData: SuperJSON.serialize,\r\n        shouldDehydrateQuery: (query) =>\r\n          defaultShouldDehydrateQuery(query) ||\r\n          query.state.status === \"pending\",\r\n      },\r\n      hydrate: {\r\n        deserializeData: SuperJSON.deserialize,\r\n      },\r\n    },\r\n  });\r\n"],"names":[],"mappings":";;;AAIA;AAJA;AAAA;;;AAMO,MAAM,oBAAoB,IAC/B,IAAI,sPAAA,CAAA,cAAW,CAAC;QACd,gBAAgB;YACd,SAAS;gBACP,0DAA0D;gBAC1D,wDAAwD;gBACxD,WAAW,KAAK;YAClB;YACA,WAAW;gBACT,eAAe,gMAAA,CAAA,UAAS,CAAC,SAAS;gBAClC,sBAAsB,CAAC,QACrB,CAAA,GAAA,oPAAA,CAAA,8BAA2B,AAAD,EAAE,UAC5B,MAAM,KAAK,CAAC,MAAM,KAAK;YAC3B;YACA,SAAS;gBACP,iBAAiB,gMAAA,CAAA,UAAS,CAAC,WAAW;YACxC;QACF;IACF"}},
    {"offset": {"line": 154, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 160, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/trpc/server.ts"],"sourcesContent":["import \"server-only\";\r\n\r\nimport { createHydrationHelpers } from \"@trpc/react-query/rsc\";\r\nimport { headers } from \"next/headers\";\r\nimport { cache } from \"react\";\r\n\r\nimport { createCaller, type AppRouter } from \"~/server/api/root\";\r\nimport { createTRPCContext } from \"~/server/api/trpc\";\r\nimport { createQueryClient } from \"./query-client\";\r\n\r\n/**\r\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\r\n * handling a tRPC call from a React Server Component.\r\n */\r\nconst createContext = cache(async () => {\r\n  const heads = new Headers(await headers());\r\n  heads.set(\"x-trpc-source\", \"rsc\");\r\n\r\n  return createTRPCContext({\r\n    headers: heads,\r\n  });\r\n});\r\n\r\nconst getQueryClient = cache(createQueryClient);\r\nconst caller = createCaller(createContext);\r\n\r\nexport const { trpc: api, HydrateClient } = createHydrationHelpers<AppRouter>(\r\n  caller,\r\n  getQueryClient\r\n);\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;AACA;AACA;AAEA;AACA;AACA;;;;;;;;AAEA;;;CAGC,GACD,MAAM,gBAAgB,CAAA,GAAA,oUAAA,CAAA,QAAK,AAAD,EAAE;IAC1B,MAAM,QAAQ,IAAI,QAAQ,MAAM,CAAA,GAAA,8PAAA,CAAA,UAAO,AAAD;IACtC,MAAM,GAAG,CAAC,iBAAiB;IAE3B,OAAO,CAAA,GAAA,4HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS;IACX;AACF;AAEA,MAAM,iBAAiB,CAAA,GAAA,oUAAA,CAAA,QAAK,AAAD,EAAE,8HAAA,CAAA,oBAAiB;AAC9C,MAAM,SAAS,CAAA,GAAA,4HAAA,CAAA,eAAY,AAAD,EAAE;AAErB,MAAM,EAAE,MAAM,GAAG,EAAE,aAAa,EAAE,GAAG,CAAA,GAAA,+WAAA,CAAA,yBAAsB,AAAD,EAC/D,QACA"}},
    {"offset": {"line": 191, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 197, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/app/_components/navigation.tsx"],"sourcesContent":["import Link from \"next/link\";\r\n\r\nexport default function Headingnav() {\r\n  return (\r\n    <nav className=\"flex justify-between items-center p-4 bg-white shadow-md text-indigo-800\">\r\n       <div className=\"flex gap-6\">\r\n        <Link className=\"hover:text-indigo-500 transition-colors\" href=\"/\">Home</Link>\r\n        <Link className=\"hover:text-indigo-500 transition-colors\" href=\"/about\">About</Link>\r\n        <Link className=\"hover:text-indigo-500 transition-colors\" href=\"/contact\">Contact</Link>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAAA;;;AAEe,SAAS;IACtB,qBACE,6WAAC;QAAI,WAAU;kBACZ,cAAA,6WAAC;YAAI,WAAU;;8BACd,6WAAC,2RAAA,CAAA,UAAI;oBAAC,WAAU;oBAA0C,MAAK;8BAAI;;;;;;8BACnE,6WAAC,2RAAA,CAAA,UAAI;oBAAC,WAAU;oBAA0C,MAAK;8BAAS;;;;;;8BACxE,6WAAC,2RAAA,CAAA,UAAI;oBAAC,WAAU;oBAA0C,MAAK;8BAAW;;;;;;;;;;;;;;;;;AAIlF"}},
    {"offset": {"line": 249, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 255, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/app/page.tsx"],"sourcesContent":["import Link from \"next/link\";\r\nimport { LatestPost } from \"~/app/_components/post\";\r\nimport { api, HydrateClient } from \"~/trpc/server\";\r\nimport Headingnav from \"./_components/navigation\";\r\n\r\nexport default async function Home() {\r\n  const hello = await api.post.hello({ text: \"from tRPC\" });\r\n\r\n  void api.post.getLatest.prefetch();\r\n\r\n  return (\r\n    <HydrateClient>\r\n      <div className=\"min-h-screen bg-gradient-to-b from-green-600 to-green-900 text-white\">\r\n        <Headingnav></Headingnav>\r\n        {/* Main Content */}\r\n        <main className=\"flex flex-col items-center justify-center py-16\">\r\n          <h1 className=\"text-5xl font-extrabold tracking-tight sm:text-[5rem]\">\r\n           </h1>\r\n          <p className=\"text-2xl text-white mt-8\">\r\n           </p>\r\n          <LatestPost />\r\n        </main>\r\n      </div>\r\n    </HydrateClient>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AACA;AACA;AACA;;;;;AAEe,eAAe;IAC5B,MAAM,QAAQ,MAAM,qHAAA,CAAA,MAAG,CAAC,IAAI,CAAC,KAAK,CAAC;QAAE,MAAM;IAAY;IAEvD,KAAK,qHAAA,CAAA,MAAG,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ;IAEhC,qBACE,6WAAC,qHAAA,CAAA,gBAAa;kBACZ,cAAA,6WAAC;YAAI,WAAU;;8BACb,6WAAC,wIAAA,CAAA,UAAU;;;;;8BAEX,6WAAC;oBAAK,WAAU;;sCACd,6WAAC;4BAAG,WAAU;;;;;;sCAEd,6WAAC;4BAAE,WAAU;;;;;;sCAEb,6WAAC,kIAAA,CAAA,aAAU;;;;;;;;;;;;;;;;;;;;;;AAKrB"}},
    {"offset": {"line": 320, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 332, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":""}},
    {"offset": {"line": 333, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}
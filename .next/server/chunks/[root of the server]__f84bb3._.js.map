{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 47, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/env.js"],"sourcesContent":["import { createEnv } from \"@t3-oss/env-nextjs\";\r\nimport { z } from \"zod\";\r\n\r\nexport const env = createEnv({\r\n  /**\r\n   * Specify your server-side environment variables schema here. This way you can ensure the app\r\n   * isn't built with invalid env vars.\r\n   */\r\n  server: {\r\n    NODE_ENV: z.enum([\"development\", \"test\", \"production\"]),\r\n  },\r\n\r\n  /**\r\n   * Specify your client-side environment variables schema here. This way you can ensure the app\r\n   * isn't built with invalid env vars. To expose them to the client, prefix them with\r\n   * `NEXT_PUBLIC_`.\r\n   */\r\n  client: {\r\n    // NEXT_PUBLIC_CLIENTVAR: z.string(),\r\n  },\r\n\r\n  /**\r\n   * You can't destruct `process.env` as a regular object in the Next.js edge runtimes (e.g.\r\n   * middlewares) or client-side so we need to destruct manually.\r\n   */\r\n  runtimeEnv: {\r\n    NODE_ENV: process.env.NODE_ENV,\r\n    // NEXT_PUBLIC_CLIENTVAR: process.env.NEXT_PUBLIC_CLIENTVAR,\r\n  },\r\n  /**\r\n   * Run `build` or `dev` with `SKIP_ENV_VALIDATION` to skip env validation. This is especially\r\n   * useful for Docker builds.\r\n   */\r\n  skipValidation: !!process.env.SKIP_ENV_VALIDATION,\r\n  /**\r\n   * Makes it so that empty strings are treated as undefined. `SOME_VAR: z.string()` and\r\n   * `SOME_VAR=''` will throw an error.\r\n   */\r\n  emptyStringAsUndefined: true,\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AACA;;;AAEO,MAAM,MAAM,CAAA,GAAA,uRAAA,CAAA,YAAS,AAAD,EAAE;IAC3B;;;GAGC,GACD,QAAQ;QACN,UAAU,uLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAe;YAAQ;SAAa;IACxD;IAEA;;;;GAIC,GACD,QAAQ;IAER;IAEA;;;GAGC,GACD,YAAY;QACV,QAAQ;IAEV;IACA;;;GAGC,GACD,gBAAgB,CAAC,CAAC,QAAQ,GAAG,CAAC,mBAAmB;IACjD;;;GAGC,GACD,wBAAwB;AAC1B"}},
    {"offset": {"line": 86, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 92, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/server/api/trpc.ts"],"sourcesContent":["/**\r\n * YOU PROBABLY DON'T NEED TO EDIT THIS FILE, UNLESS:\r\n * 1. You want to modify request context (see Part 1).\r\n * 2. You want to create a new middleware or type of procedure (see Part 3).\r\n *\r\n * TL;DR - This is where all the tRPC server stuff is created and plugged in. The pieces you will\r\n * need to use are documented accordingly near the end.\r\n */\r\nimport { initTRPC } from \"@trpc/server\";\r\nimport superjson from \"superjson\";\r\nimport { ZodError } from \"zod\";\r\n\r\n/**\r\n * 1. CONTEXT\r\n *\r\n * This section defines the \"contexts\" that are available in the backend API.\r\n *\r\n * These allow you to access things when processing a request, like the database, the session, etc.\r\n *\r\n * This helper generates the \"internals\" for a tRPC context. The API handler and RSC clients each\r\n * wrap this and provides the required context.\r\n *\r\n * @see https://trpc.io/docs/server/context\r\n */\r\nexport const createTRPCContext = async (opts: { headers: Headers }) => {\r\n  return {\r\n    ...opts,\r\n  };\r\n};\r\n\r\n/**\r\n * 2. INITIALIZATION\r\n *\r\n * This is where the tRPC API is initialized, connecting the context and transformer. We also parse\r\n * ZodErrors so that you get typesafety on the frontend if your procedure fails due to validation\r\n * errors on the backend.\r\n */\r\nconst t = initTRPC.context<typeof createTRPCContext>().create({\r\n  transformer: superjson,\r\n  errorFormatter({ shape, error }) {\r\n    return {\r\n      ...shape,\r\n      data: {\r\n        ...shape.data,\r\n        zodError:\r\n          error.cause instanceof ZodError ? error.cause.flatten() : null,\r\n      },\r\n    };\r\n  },\r\n});\r\n\r\n/**\r\n * Create a server-side caller.\r\n *\r\n * @see https://trpc.io/docs/server/server-side-calls\r\n */\r\nexport const createCallerFactory = t.createCallerFactory;\r\n\r\n/**\r\n * 3. ROUTER & PROCEDURE (THE IMPORTANT BIT)\r\n *\r\n * These are the pieces you use to build your tRPC API. You should import these a lot in the\r\n * \"/src/server/api/routers\" directory.\r\n */\r\n\r\n/**\r\n * This is how you create new routers and sub-routers in your tRPC API.\r\n *\r\n * @see https://trpc.io/docs/router\r\n */\r\nexport const createTRPCRouter = t.router;\r\n\r\n/**\r\n * Middleware for timing procedure execution and adding an artificial delay in development.\r\n *\r\n * You can remove this if you don't like it, but it can help catch unwanted waterfalls by simulating\r\n * network latency that would occur in production but not in local development.\r\n */\r\nconst timingMiddleware = t.middleware(async ({ next, path }) => {\r\n  const start = Date.now();\r\n\r\n  if (t._config.isDev) {\r\n    // artificial delay in dev\r\n    const waitMs = Math.floor(Math.random() * 400) + 100;\r\n    await new Promise((resolve) => setTimeout(resolve, waitMs));\r\n  }\r\n\r\n  const result = await next();\r\n\r\n  const end = Date.now();\r\n  console.log(`[TRPC] ${path} took ${end - start}ms to execute`);\r\n\r\n  return result;\r\n});\r\n\r\n/**\r\n * Public (unauthenticated) procedure\r\n *\r\n * This is the base piece you use to build new queries and mutations on your tRPC API. It does not\r\n * guarantee that a user querying is authorized, but you can still access user session data if they\r\n * are logged in.\r\n */\r\nexport const publicProcedure = t.procedure.use(timingMiddleware);\r\n"],"names":[],"mappings":"AAAA;;;;;;;CAOC;;;;;;AACD;AACA;AADA;AAEA;;;;AAcO,MAAM,oBAAoB,OAAO;IACtC,OAAO;QACL,GAAG,IAAI;IACT;AACF;AAEA;;;;;;CAMC,GACD,MAAM,IAAI,uSAAA,CAAA,WAAQ,CAAC,OAAO,GAA6B,MAAM,CAAC;IAC5D,aAAa,kMAAA,CAAA,UAAS;IACtB,gBAAe,EAAE,KAAK,EAAE,KAAK,EAAE;QAC7B,OAAO;YACL,GAAG,KAAK;YACR,MAAM;gBACJ,GAAG,MAAM,IAAI;gBACb,UACE,MAAM,KAAK,YAAY,uLAAA,CAAA,WAAQ,GAAG,MAAM,KAAK,CAAC,OAAO,KAAK;YAC9D;QACF;IACF;AACF;AAOO,MAAM,sBAAsB,EAAE,mBAAmB;AAcjD,MAAM,mBAAmB,EAAE,MAAM;AAExC;;;;;CAKC,GACD,MAAM,mBAAmB,EAAE,UAAU,CAAC,OAAO,EAAE,IAAI,EAAE,IAAI,EAAE;IACzD,MAAM,QAAQ,KAAK,GAAG;IAEtB,IAAI,EAAE,OAAO,CAAC,KAAK,EAAE;QACnB,0BAA0B;QAC1B,MAAM,SAAS,KAAK,KAAK,CAAC,KAAK,MAAM,KAAK,OAAO;QACjD,MAAM,IAAI,QAAQ,CAAC,UAAY,WAAW,SAAS;IACrD;IAEA,MAAM,SAAS,MAAM;IAErB,MAAM,MAAM,KAAK,GAAG;IACpB,QAAQ,GAAG,CAAC,CAAC,OAAO,EAAE,KAAK,MAAM,EAAE,MAAM,MAAM,aAAa,CAAC;IAE7D,OAAO;AACT;AASO,MAAM,kBAAkB,EAAE,SAAS,CAAC,GAAG,CAAC"}},
    {"offset": {"line": 155, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/server/api/routers/post.ts"],"sourcesContent":["import { z } from \"zod\";\r\nimport { createTRPCRouter, publicProcedure } from \"~/server/api/trpc\";\r\n\r\n// Define Todo interface\r\ninterface Todo {\r\n  id: number;\r\n  title: string;\r\n  description: string;\r\n  startDate: string;\r\n  endDate: string;\r\n  status: \"completed\" | \"pending\" | \"active\" | \"overdue\";\r\n  _createdAt: string;\r\n  _updatedAt: string;\r\n}\r\nconst todos: Todo[] = [\r\n  /*{\r\n   /id: 1,\r\n    title: \"Learn TRPC\",\r\n    description: \"Study how to integrate TRPC into a project.\",\r\n    startDate: \"2025-02-01\",\r\n    endDate: \"2025-02-10\",\r\n    status: \"active\",\r\n    _createdAt: new Date().toISOString(),\r\n    _updatedAt: new Date().toISOString(),\r\n  },*/\r\n];\r\n\r\n// Router for Todo-related actions\r\nexport const todoRouter = createTRPCRouter({\r\n  // Fetch all Todos\r\n  list: publicProcedure.query(() => todos),\r\n\r\n  // Create a new Todo\r\n  create: publicProcedure\r\n    .input(\r\n      z.object({\r\n        title: z.string().min(1),\r\n        description: z.string().min(1),\r\n        startDate: z.string(),\r\n        endDate: z.string(),\r\n        status: z.enum([\"completed\", \"pending\", \"active\", \"overdue\"]),\r\n      })\r\n    )\r\n    .mutation(async ({ input }) => {\r\n      const todo: Todo = {\r\n        id: todos.length + 1,\r\n        title: input.title,\r\n        description: input.description,\r\n        startDate: input.startDate,\r\n        endDate: input.endDate,\r\n        status: input.status,\r\n        _createdAt: new Date().toISOString(),\r\n        _updatedAt: new Date().toISOString(),\r\n      };\r\n      todos.push(todo);\r\n      return todo;\r\n    }),\r\n\r\n  // Fetch a specific Todo by ID\r\n  getById: publicProcedure.input(z.number()).query((opts) => {\r\n    return todos.find((todo) => todo.id === opts.input) ?? null;\r\n  }),\r\n\r\n  // Update an existing Todo\r\n  update: publicProcedure\r\n    .input(\r\n      z.object({\r\n        id: z.number(),\r\n        title: z.string().min(1),\r\n        description: z.string().min(1),\r\n        startDate: z.string(),\r\n        endDate: z.string(),\r\n        status: z.enum([\"completed\", \"pending\", \"active\", \"overdue\"]),\r\n      })\r\n    )\r\n    .mutation(async ({ input }) => {\r\n      const todoIndex = todos.findIndex((todo) => todo.id === input.id);\r\n      if (todoIndex === -1) {\r\n        throw new Error(\"Todo not found\");\r\n      }\r\n      const updatedTodo = { ...todos[todoIndex], ...input, _updatedAt: new Date().toISOString() };\r\n      todos[todoIndex] = updatedTodo;\r\n      return updatedTodo;\r\n    }),\r\n\r\n    \r\n\r\n  // Delete a Todo\r\n  delete: publicProcedure.input(z.number()).mutation(async ({ input }) => {\r\n    const todoIndex = todos.findIndex((todo) => todo.id === input);\r\n    if (todoIndex === -1) {\r\n      throw new Error(\"Todo not found\");\r\n    }\r\n    const deletedTodo = todos.splice(todoIndex, 1);\r\n    return deletedTodo[0];\r\n  }),\r\n});\r\n"],"names":[],"mappings":";;;AACA;AADA;;;AAcA,MAAM,QAAgB,EAWrB;AAGM,MAAM,aAAa,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACzC,kBAAkB;IAClB,MAAM,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,IAAM;IAElC,oBAAoB;IACpB,QAAQ,8HAAA,CAAA,kBAAe,CACpB,KAAK,CACJ,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,OAAO,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,aAAa,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC5B,WAAW,uLAAA,CAAA,IAAC,CAAC,MAAM;QACnB,SAAS,uLAAA,CAAA,IAAC,CAAC,MAAM;QACjB,QAAQ,uLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAa;YAAW;YAAU;SAAU;IAC9D,IAED,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACxB,MAAM,OAAa;YACjB,IAAI,MAAM,MAAM,GAAG;YACnB,OAAO,MAAM,KAAK;YAClB,aAAa,MAAM,WAAW;YAC9B,WAAW,MAAM,SAAS;YAC1B,SAAS,MAAM,OAAO;YACtB,QAAQ,MAAM,MAAM;YACpB,YAAY,IAAI,OAAO,WAAW;YAClC,YAAY,IAAI,OAAO,WAAW;QACpC;QACA,MAAM,IAAI,CAAC;QACX,OAAO;IACT;IAEF,8BAA8B;IAC9B,SAAS,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,uLAAA,CAAA,IAAC,CAAC,MAAM,IAAI,KAAK,CAAC,CAAC;QAChD,OAAO,MAAM,IAAI,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK,KAAK,KAAK,KAAK;IACzD;IAEA,0BAA0B;IAC1B,QAAQ,8HAAA,CAAA,kBAAe,CACpB,KAAK,CACJ,uLAAA,CAAA,IAAC,CAAC,MAAM,CAAC;QACP,IAAI,uLAAA,CAAA,IAAC,CAAC,MAAM;QACZ,OAAO,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QACtB,aAAa,uLAAA,CAAA,IAAC,CAAC,MAAM,GAAG,GAAG,CAAC;QAC5B,WAAW,uLAAA,CAAA,IAAC,CAAC,MAAM;QACnB,SAAS,uLAAA,CAAA,IAAC,CAAC,MAAM;QACjB,QAAQ,uLAAA,CAAA,IAAC,CAAC,IAAI,CAAC;YAAC;YAAa;YAAW;YAAU;SAAU;IAC9D,IAED,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACxB,MAAM,YAAY,MAAM,SAAS,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK,MAAM,EAAE;QAChE,IAAI,cAAc,CAAC,GAAG;YACpB,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,cAAc;YAAE,GAAG,KAAK,CAAC,UAAU;YAAE,GAAG,KAAK;YAAE,YAAY,IAAI,OAAO,WAAW;QAAG;QAC1F,KAAK,CAAC,UAAU,GAAG;QACnB,OAAO;IACT;IAIF,gBAAgB;IAChB,QAAQ,8HAAA,CAAA,kBAAe,CAAC,KAAK,CAAC,uLAAA,CAAA,IAAC,CAAC,MAAM,IAAI,QAAQ,CAAC,OAAO,EAAE,KAAK,EAAE;QACjE,MAAM,YAAY,MAAM,SAAS,CAAC,CAAC,OAAS,KAAK,EAAE,KAAK;QACxD,IAAI,cAAc,CAAC,GAAG;YACpB,MAAM,IAAI,MAAM;QAClB;QACA,MAAM,cAAc,MAAM,MAAM,CAAC,WAAW;QAC5C,OAAO,WAAW,CAAC,EAAE;IACvB;AACF"}},
    {"offset": {"line": 238, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 244, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/server/api/root.ts"],"sourcesContent":["import { todoRouter } from \"~/server/api/routers/post\";\r\nimport { createCallerFactory, createTRPCRouter } from \"~/server/api/trpc\";\r\n\r\n/**\r\n * This is the primary router for your server.\r\n *\r\n * All routers added in /api/routers should be manually added here.\r\n */\r\nexport const appRouter = createTRPCRouter({\r\n  post: todoRouter,\r\n});\r\n\r\n// export type definition of API\r\nexport type AppRouter = typeof appRouter;\r\n\r\n/**\r\n * Create a server-side caller for the tRPC API.\r\n * @example\r\n * const trpc = createCaller(createContext);\r\n * const res = await trpc.post.all();\r\n *       ^? Post[]\r\n */\r\nexport const createCaller = createCallerFactory(appRouter);\r\n"],"names":[],"mappings":";;;;AAAA;AACA;;;AAOO,MAAM,YAAY,CAAA,GAAA,8HAAA,CAAA,mBAAgB,AAAD,EAAE;IACxC,MAAM,yIAAA,CAAA,aAAU;AAClB;AAYO,MAAM,eAAe,CAAA,GAAA,8HAAA,CAAA,sBAAmB,AAAD,EAAE"}},
    {"offset": {"line": 256, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 262, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Princ/OneDrive/Documents/todo-application/src/app/api/trpc/%5Btrpc%5D/route.ts"],"sourcesContent":["import { fetchRequestHandler } from \"@trpc/server/adapters/fetch\";\r\nimport { type NextRequest } from \"next/server\";\r\n\r\nimport { env } from \"~/env\";\r\nimport { appRouter } from \"~/server/api/root\";\r\nimport { createTRPCContext } from \"~/server/api/trpc\";\r\n\r\n/**\r\n * This wraps the `createTRPCContext` helper and provides the required context for the tRPC API when\r\n * handling a HTTP request (e.g. when you make requests from Client Components).\r\n */\r\nconst createContext = async (req: NextRequest) => {\r\n  return createTRPCContext({\r\n    headers: req.headers,\r\n  });\r\n};\r\n\r\nconst handler = (req: NextRequest) =>\r\n  fetchRequestHandler({\r\n    endpoint: \"/api/trpc\",\r\n    req,\r\n    router: appRouter,\r\n    createContext: () => createContext(req),\r\n    onError:\r\n      env.NODE_ENV === \"development\"\r\n        ? ({ path, error }) => {\r\n            console.error(\r\n              `❌ tRPC failed on ${path ?? \"<no-path>\"}: ${error.message}`\r\n            );\r\n          }\r\n        : undefined,\r\n  });\r\n\r\nexport { handler as GET, handler as POST };\r\n"],"names":[],"mappings":";;;;AAAA;AAGA;AACA;AACA;AALA;;;;;AAOA;;;CAGC,GACD,MAAM,gBAAgB,OAAO;IAC3B,OAAO,CAAA,GAAA,8HAAA,CAAA,oBAAiB,AAAD,EAAE;QACvB,SAAS,IAAI,OAAO;IACtB;AACF;AAEA,MAAM,UAAU,CAAC,MACf,CAAA,GAAA,4RAAA,CAAA,sBAAmB,AAAD,EAAE;QAClB,UAAU;QACV;QACA,QAAQ,8HAAA,CAAA,YAAS;QACjB,eAAe,IAAM,cAAc;QACnC,SACE,4GAAA,CAAA,MAAG,CAAC,QAAQ,KAAK,gBACb,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE;YACd,QAAQ,KAAK,CACX,CAAC,iBAAiB,EAAE,QAAQ,YAAY,EAAE,EAAE,MAAM,OAAO,EAAE;QAE/D,IACA;IACR"}},
    {"offset": {"line": 293, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}